@use 'styles/abstracts/mixins';
@use 'styles/abstracts/functions';
@use 'styles/abstracts/variables';
@use 'sass:color';
@use 'sass:map';

.button {
  align-items: center;
  background-color: map.get(variables.$colors, 'white');
  border: 1px solid transparent;
  border-color: map.get(variables.$colors, 'grey');
  border-radius: 0.375em;
  border-width: 1px;
  color: map.get(variables.$colors, 'black');
  cursor: pointer;
  display: inline-flex;
  font-size: 1em;
  justify-content: center;
  line-height: 1.5;
  padding: calc(0.5em - 1px) 1em;
  position: relative;
  text-align: center;
  user-select: none;
  vertical-align: top;
  white-space: nowrap;

  @each $key, $color in variables.$colors {
    &.is-#{$key} {
      background-color: $color;
      border-color: transparent;
      color: functions.find-color-invert($color);

      &:hover {
        background-color: color.adjust($color, $lightness: -2.5%);
        border-color: transparent;
        color: functions.find-color-invert($color);
      }

      &:focus {
        border-color: transparent;
        color: functions.find-color-invert($color);

        &:not(:active) {
          box-shadow: 0 0 0 0.125em rgba($color, 0.25);
        }
      }

      &:active {
        background-color: color.adjust($color, $lightness: -5%);
        border-color: transparent;
        color: functions.find-color-invert($color);
      }

      &[disabled] {
        background-color: $color;
        border-color: transparent;
        box-shadow: none;
      }

      &.is-outlined {
        background-color: transparent;
        border-color: $color;
        color: $color;

        &:hover,
        &:focus {
          background-color: $color;
          border-color: unset;
          color: functions.find-color-invert($color);
        }

        &[disabled] {
          background-color: transparent;
          border-color: $color;
          box-shadow: none;
          color: $color;
        }
      }
    }
  }

  &.is-fullwidth {
    display: flex;
  }
}
